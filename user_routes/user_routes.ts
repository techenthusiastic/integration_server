import express from "express";
import { Request, Response, NextFunction } from "express";
const router = express.Router();
//
import jwt from "jsonwebtoken";
import { genAccessToken, genRefreshToken } from "./../helpers/jwtTokenizer";
//
import jwt_Token_Verifier from "./../middleware/auth_token";
//
const JWT_REFRESH_SECRET: any = process.env.JWT_REFRESH_SECRET;
//
const createErr = require("http-errors");
//
const { QueryTypes } = require("sequelize");
const user_detail_mdl = require("./../sql_models/user_detail_mdl");
const institute_detail_mdl = require("./../sql_models/institute_details_mdl");
const { sequelize } = require("../sql_models/mdl_obj_fascilator");
//
type typeRespObj = {
	status: string;
	accessToken: string;
	refreshToken: string;
	user_details: any;
	institute_details: any;
};
router.post(
	"/auth",
	async (req: Request, res: Response, next: NextFunction) => {
		const body = req.body;
		try {
			if (!(body && body.email && body.password))
				return next(
					createErr.BadRequest(
						"One or more of the required fields found missing."
					)
				);
			//
			institute_detail_mdl.hasOne(user_detail_mdl, {
				foreignKey: "user_inst_id",
				sourceKey: "id",
			});
			user_detail_mdl.belongsTo(institute_detail_mdl, {
				foreignKey: "user_inst_id",
				targetKey: "id",
			});
			const user = await user_detail_mdl.findOne({
				attributes: [
					"user_id",
					"user_inst_id",
					"user_status",
					"user_hash",
					"user_password",
					"user_first_name",
					"user_last_name",
					"gre_test_enable",
					"enable_app_test",
					"enable_short_test",
				],
				where: { user_email: body.email },
				include: {
					model: institute_detail_mdl,
					required: true,
					attributes: [
						"name",
						"email",
						"ekart_status",
						"liveclass_status",
						"afe_status",
						"online_test_status",
					],
				},
			});
			if (!user)
				next(createErr.Unauthorized("No user exists with this E-Mail"));
			else if (!user.user_status)
				next(createErr.Unauthorized("Inactive Account"));
			else if (user.user_password === body.password) {
				const user_details = user.dataValues;
				const institute_details = user_details.institute_detail.dataValues;
				// Prepare payload data - for sign of JWT
				const user_Info = {
					email: body.email,
					id: user_details.user_id,
					user_hash: user_details.user_hash,
				};
				// Extract user details - to be sent
				delete user_details.institute_detail;
				delete user_details.user_password;
				//
				const respObj: typeRespObj = {
					status: "success",
					accessToken: genAccessToken(user_Info),
					refreshToken: genRefreshToken(user_Info),
					user_details: user_details,
					institute_details: institute_details,
				};
				res.json(respObj);
			} else next(createErr.Unauthorized("Invalid Password"));
		} catch (error) {
			next(error);
		}
	}
);
// Logout - sub-route
router.post("/logout", async (req, res, next) => {
	res.send({ status: "success", msg: "Was processed" });
});
// Provide Request with Access Token - generated by decoding refresh-Token
router.post("/getToken", (req, res, next) => {
	const body = req.body;
	if (!(body && body.refToken))
		return next(createErr.BadRequest("No Refresh Token was sent"));
	// Process Access Token Creation
	const refToken = body.refToken;
	jwt.verify(refToken, JWT_REFRESH_SECRET, (err: any, decoded: any) => {
		if (err)
			return next(
				createErr.InternalServerError("Verification & Decoding Failed")
			);
		// decoded - contains the jwt_payload passed during token creation
		// delete issue at information
		delete decoded.iat;
		const newAccessToken = genAccessToken(decoded);
		res.json({ accessToken: newAccessToken });
	});
});
router.use("/who", jwt_Token_Verifier);
router.post("/who", (req, res, next) => {
	res.json(res.locals.user);
});
//
// setTimeout(async () => {
// const result = await sequelize.query(
// 	`SELECT user_id, user_hash, is_admin, user_password, id, name FROM user_detail INNER JOIN institute_details ON user_inst_id = id WHERE user_email=:email;`,
// 	{ replacements: { email: "usera@gmail.com" }, type: QueryTypes.SELECT }
// );
// console.log(result);
// user_detail_mdl.hasOne(institute_detail_mdl, {
// 	foreignKey: "id",
// 	// otherKey: "user_inst_id",
// });
// institute_detail_mdl.belongsTo(user_detail_mdl, {
// 	foreignKey: "user_inst_id",
// 	targetKey: "user_inst_id",
// 	// otherKey: "id",
// });
// institute_detail_mdl.hasOne(user_detail_mdl, {
// 	foreignKey: "user_inst_id",
// 	sourceKey: "id",
// });
// user_detail_mdl.belongsTo(institute_detail_mdl, {
// 	foreignKey: "user_inst_id",
// 	targetKey: "id",
// });
// const user = await user_detail_mdl.findOne({
// 	attributes: ["user_status"],
// 	where: { user_email: "usera@gmail.com" },
// 	include: {
// 		model: institute_detail_mdl,
// 		required: true,
// 		attributes: ["name"],
// 	},
// });
// console.log(user.dataValues.user_status, user.institute_detail.dataValues);
// }, 1000);
module.exports = router;
